// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name JubaExpressSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1
import AVKit
import Accelerate
import Combine
import CommonCrypto
import CoreGraphics
import CoreImage
import CryptoSwift
import DeveloperToolsSupport
import Foundation
import ImageIO
@_exported import JubaExpressSDK
import Localize_Swift
import Lottie
import MobileCoreServices
import PDFKit
import QuartzCore
import Swift
import SwiftUI
import UIKit.UIGestureRecognizerSubclass
import UIKit
import WebKit
import ZendeskSDK
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc public class JESDKConfiguration : ObjectiveC.NSObject {
  public init(BaseURL: Swift.String, SubscriptionKey: Swift.String, PartnerKey: Swift.String, referenceid: Swift.String? = nil, customerInfo: JubaExpressSDK.JESSDKCustomerInfo, enviroment: JubaExpressSDK.JESDKBuildEnvironment, language: Swift.String? = "ENG", zendeskInAppObject: ZendeskSDK.Zendesk? = nil)
  @objc deinit
}
public enum JESDKBuildEnvironment : Swift.String {
  case Live
  case UAT
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public class JESSDKCustomerDocument : ObjectiveC.NSObject {
  public init(DocumentType: Swift.String, DocumentNumber: Swift.String, DocumentIssueDate: Swift.String, DocumentExpiryDate: Swift.String, DocumentIssuingCountry: Swift.String)
  @objc deinit
}
@objc public class JESSDKCustomerName : ObjectiveC.NSObject {
  public init(FirstName: Swift.String, MiddleName: Swift.String, LastName: Swift.String)
  @objc deinit
}
@objc public class JESSDKCustomerInfo : ObjectiveC.NSObject {
  public init(name: JubaExpressSDK.JESSDKCustomerName, CIF: Swift.String, mobile: Swift.String, email: Swift.String, nationality: Swift.String, DateOfBirth: Swift.String, PlaceOfBirth: Swift.String, Gender: Swift.String, Document: JubaExpressSDK.JESSDKCustomerDocument)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class JESDK {
  public var delegate: (any JubaExpressSDK.JESDKDelegate)?
  public static func initSDK(configuration: JubaExpressSDK.JESDKConfiguration, root: UIKit.UIViewController)
  @objc deinit
}
extension JubaExpressSDK.JESDK {
  public class func sharedInstance() -> JubaExpressSDK.JESDK?
}
extension JubaExpressSDK.JESDK {
  @objc dynamic public class func setTopHeadingColor(_ color: UIKit.UIColor)
  @objc dynamic public class func setPrimaryColor(_ color: UIKit.UIColor)
  @objc dynamic public class func setTertionaryColor(_ color: UIKit.UIColor)
  @objc dynamic public class func setSecondaryColor(_ color: UIKit.UIColor)
  @objc dynamic public class func setBackgroundColor(_ color: UIKit.UIColor)
  @objc dynamic public class func setButtonBackgroundColor(_ color: UIKit.UIColor)
  @objc dynamic public class func setButtonTextColor(_ color: UIKit.UIColor)
}
public protocol JESDKDelegate {
  func JESDKSecretKey(payment: JubaExpressSDK.Payment)
}
public struct Payment {
  public var secretkey: Swift.String?
  public var referenceId: Swift.String?
  public var totalSentAmount: Swift.Double?
  public var currencyCode: Swift.String?
  public var BeneficiaryName: Swift.String?
  public var DestinationCountry: Swift.String?
  public var PaymentMode: Swift.String?
  public var AccountNo: Swift.String?
}
@_hasMissingDesignatedInitializers public class JESDKSharedInstance {
  public static var shared: JubaExpressSDK.JESDKSharedInstance
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class FadeTransition : ObjectiveC.NSObject, UIKit.UIViewControllerAnimatedTransitioning {
  @_Concurrency.MainActor @preconcurrency @objc open func transitionDuration(using transitionContext: (any UIKit.UIViewControllerContextTransitioning)?) -> Foundation.TimeInterval
  @_Concurrency.MainActor @preconcurrency @objc open func animateTransition(using transitionContext: any UIKit.UIViewControllerContextTransitioning)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init()
  @objc deinit
}
open class KeychainWrapper {
  open var serviceName: Swift.String {
    get
  }
  open var accessGroup: Swift.String? {
    get
  }
  public init(serviceName: Swift.String)
  open class func standardKeychainAccess() -> JubaExpressSDK.KeychainWrapper
  open func hasValueForKey(_ keyName: Swift.String) -> Swift.Bool
  open func integerForKey(_ keyName: Swift.String) -> Swift.Int?
  open func floatForKey(_ keyName: Swift.String) -> Swift.Float?
  open func doubleForKey(_ keyName: Swift.String) -> Swift.Double?
  open func boolForKey(_ keyName: Swift.String) -> Swift.Bool?
  open func stringForKey(_ keyName: Swift.String) -> Swift.String?
  open func objectForKey(_ keyName: Swift.String) -> (any Foundation.NSCoding)?
  open func dataForKey(_ keyName: Swift.String) -> Foundation.Data?
  open func dataRefForKey(_ keyName: Swift.String) -> Foundation.Data?
  open func setInteger(_ value: Swift.Int, forKey keyName: Swift.String) -> Swift.Bool
  open func setFloat(_ value: Swift.Float, forKey keyName: Swift.String) -> Swift.Bool
  open func setDouble(_ value: Swift.Double, forKey keyName: Swift.String) -> Swift.Bool
  open func setBool(_ value: Swift.Bool, forKey keyName: Swift.String) -> Swift.Bool
  open func setString(_ value: Swift.String, forKey keyName: Swift.String) -> Swift.Bool
  open func setObject(_ value: any Foundation.NSCoding, forKey keyName: Swift.String) -> Swift.Bool
  open func setData(_ value: Foundation.Data, forKey keyName: Swift.String) -> Swift.Bool
  open func removeObjectForKey(_ keyName: Swift.String) -> Swift.Bool
  open func removeAllKeys() -> Swift.Bool
  open class func wipeKeychain()
  @objc deinit
}
extension JubaExpressSDK.KeychainWrapper {
  @available(*, deprecated, message: "Use KeychainWrapper.standardKeychainAccess().serviceName. Changing serviceName will not be supported in the future. Instead create a new KeychainWrapper instance with a custom service name.")
  public class var serviceName: Swift.String {
    get
    set(newServiceName)
  }
  @available(*, deprecated, message: "Use KeychainWrapper.standardKeychainAccess().accessGroup. Changing accessGroup will not be supported in the future. Instead create a new KeychainWrapper instance with a custom accessGroup.")
  public class var accessGroup: Swift.String? {
    get
    set(newAccessGroup)
  }
  @available(*, deprecated, message: "Access via KeychainWrapper.standardKeychainAccess()")
  public class func hasValueForKey(_ keyName: Swift.String) -> Swift.Bool
  @available(*, deprecated, message: "Access via KeychainWrapper.standardKeychainAccess()")
  public class func stringForKey(_ keyName: Swift.String) -> Swift.String?
  @available(*, deprecated, message: "Access via KeychainWrapper.standardKeychainAccess()")
  public class func objectForKey(_ keyName: Swift.String) -> (any Foundation.NSCoding)?
  @available(*, deprecated, message: "Access via KeychainWrapper.standardKeychainAccess()")
  public class func dataForKey(_ keyName: Swift.String) -> Foundation.Data?
  @available(*, deprecated, message: "Access via KeychainWrapper.standardKeychainAccess()")
  public class func dataRefForKey(_ keyName: Swift.String) -> Foundation.Data?
  @available(*, deprecated, message: "Access via KeychainWrapper.standardKeychainAccess()")
  public class func setString(_ value: Swift.String, forKey keyName: Swift.String) -> Swift.Bool
  @available(*, deprecated, message: "Access via KeychainWrapper.standardKeychainAccess()")
  public class func setObject(_ value: any Foundation.NSCoding, forKey keyName: Swift.String) -> Swift.Bool
  @available(*, deprecated, message: "Access via KeychainWrapper.standardKeychainAccess()")
  public class func setData(_ value: Foundation.Data, forKey keyName: Swift.String) -> Swift.Bool
  @available(*, deprecated, message: "Access via KeychainWrapper.standardKeychainAccess()")
  public class func removeObjectForKey(_ keyName: Swift.String) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CustomTransitionViewController : UIKit.UIViewController, UIKit.UIViewControllerTransitioningDelegate {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var modalPresentationStyle: UIKit.UIModalPresentationStyle {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc public func animationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController, source: UIKit.UIViewController) -> (any UIKit.UIViewControllerAnimatedTransitioning)?
  @_Concurrency.MainActor @preconcurrency @objc public func animationController(forDismissed dismissed: UIKit.UIViewController) -> (any UIKit.UIViewControllerAnimatedTransitioning)?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
infix operator |> : AdditionPrecedence
public enum DPDraggableButtonType {
  case rect
  case round
  public static func == (a: JubaExpressSDK.DPDraggableButtonType, b: JubaExpressSDK.DPDraggableButtonType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_Concurrency.MainActor @preconcurrency open class JESDKDPDraggableButton : UIKit.UIButton {
  @_Concurrency.MainActor @preconcurrency open var draggable: Swift.Bool
  @_Concurrency.MainActor @preconcurrency open var dragging: Swift.Bool
  @_Concurrency.MainActor @preconcurrency open var autoDocking: Swift.Bool
  @_Concurrency.MainActor @preconcurrency open var singleTapBeenCanceled: Swift.Bool
  @_Concurrency.MainActor @preconcurrency open var draggableButtonType: JubaExpressSDK.DPDraggableButtonType
  @_Concurrency.MainActor @preconcurrency open var beginLocation: CoreFoundation.CGPoint?
  @_Concurrency.MainActor @preconcurrency open var longPressGestureRecognizer: UIKit.UILongPressGestureRecognizer
  @_Concurrency.MainActor @preconcurrency open var tapBlock: (() -> Swift.Void)? {
    get
    set(tapBlock)
  }
  @_Concurrency.MainActor @preconcurrency open var doubleTapBlock: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency open var longPressBlock: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency open var draggingBlock: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency open var dragDoneBlock: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency open var autoDockingBlock: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency open var autoDockingDoneBlock: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor @preconcurrency public init(frame: CoreFoundation.CGRect, draggableButtonType: JubaExpressSDK.DPDraggableButtonType)
  @_Concurrency.MainActor @preconcurrency open func addButtonToKeyWindow()
  @_Concurrency.MainActor @preconcurrency open class func removeAllFromKeyWindow()
  @_Concurrency.MainActor @preconcurrency open class func removeFromKeyWindow(button: JubaExpressSDK.JESDKDPDraggableButton)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @IBDesignable @_Concurrency.MainActor @preconcurrency open class TransitionButton : UIKit.UIButton, UIKit.UIViewControllerTransitioningDelegate, QuartzCore.CAAnimationDelegate {
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency open var spinnerColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency open var disabledBackgroundColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency open var cornerRadius: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func prepareForInterfaceBuilder()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency open func startAnimation()
  @objc deinit
}
extension JubaExpressSDK.JESDKBuildEnvironment : Swift.Equatable {}
extension JubaExpressSDK.JESDKBuildEnvironment : Swift.Hashable {}
extension JubaExpressSDK.JESDKBuildEnvironment : Swift.RawRepresentable {}
extension JubaExpressSDK.FadeTransition : Swift.Sendable {}
extension JubaExpressSDK.DPDraggableButtonType : Swift.Equatable {}
extension JubaExpressSDK.DPDraggableButtonType : Swift.Hashable {}
